[debug] [2018-11-02T22:58:40.472Z] ----------------------------------------------------------------------
[debug] [2018-11-02T22:58:40.474Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\Berna\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js init
[debug] [2018-11-02T22:58:40.475Z] CLI Version:   6.0.1
[debug] [2018-11-02T22:58:40.475Z] Platform:      win32
[debug] [2018-11-02T22:58:40.475Z] Node Version:  v10.12.0
[debug] [2018-11-02T22:58:40.476Z] Time:          Fri Nov 02 2018 15:58:40 GMT-0700 (Pacific Daylight Time)
[debug] [2018-11-02T22:58:40.476Z] ----------------------------------------------------------------------
[debug] 
[debug] [2018-11-02T22:58:40.487Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2018-11-02T22:58:40.488Z] > authorizing via signed-in user
[info] 
     ######## #### ########  ######## ########     ###     ######  ########
     ##        ##  ##     ## ##       ##     ##  ##   ##  ##       ##
     ######    ##  ########  ######   ########  #########  ######  ######
     ##        ##  ##    ##  ##       ##     ## ##     ##       ## ##
     ##       #### ##     ## ######## ########  ##     ##  ######  ########

You're about to initialize a Firebase project in this directory:

  C:\Users\Berna\Desktop\SeniorProject\Symph\vuetube

[info] 
=== Project Setup
[info] 
[info] First, let's associate this project directory with a Firebase project.
[info] You can create multiple project aliases by running firebase use --add, 
[info] but for now we'll just set up a default project.
[info] 
[debug] [2018-11-02T22:58:47.383Z] > refreshing access token with scopes: ["email","https://www.googleapis.com/auth/cloud-platform","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","openid"]
[debug] [2018-11-02T22:58:47.383Z] >>> HTTP REQUEST POST https://www.googleapis.com/oauth2/v3/token  
 <request body omitted>
[debug] [2018-11-02T22:58:47.537Z] <<< HTTP RESPONSE 200
[debug] [2018-11-02T22:58:47.542Z] >>> HTTP REQUEST GET https://firebase.googleapis.com/v1beta1/projects?page_size=100  
 
[debug] [2018-11-02T22:58:47.952Z] <<< HTTP RESPONSE 200
[info] i  Using project vuepractice-f302e (VuePractice)
[info] 
=== Database Setup
[info] 
[info] Firebase Realtime Database Rules allow you to define how your data should be
[info] structured and when your data can be read from and written to.
[info] 
[debug] [2018-11-02T22:58:55.721Z] >>> HTTP REQUEST GET https://vuepractice-f302e.firebaseio.com/.settings/rules.json  
 
[debug] [2018-11-02T22:58:56.133Z] <<< HTTP RESPONSE 200
[info] +  Database Rules for vuepractice-f302e have been downloaded to database.rules.json.
[info] Future modifications to database.rules.json will update Database Rules when you run
[info] firebase deploy.
[info] 
=== Firestore Setup
[debug] [2018-11-02T22:58:56.138Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2018-11-02T22:58:56.139Z] > authorizing via signed-in user
[debug] [2018-11-02T22:58:56.140Z] >>> HTTP REQUEST GET https://firebase.googleapis.com/v1beta1/projects/vuepractice-f302e  
 
[debug] [2018-11-02T22:58:56.287Z] <<< HTTP RESPONSE 200
[info] 
[info] Firestore Security Rules allow you to define how and when to allow
[info] requests. You can keep these rules in your project directory
[info] and publish them with firebase deploy.
[info] 
[debug] [2018-11-02T22:58:57.336Z] >>> HTTP REQUEST GET https://firebaserules.googleapis.com/v1/projects/vuepractice-f302e/releases  
 
[debug] [2018-11-02T22:58:57.806Z] <<< HTTP RESPONSE 200
[debug] [2018-11-02T22:58:57.807Z] No rulesets found, using default.
[info] 
[info] Firestore indexes allow you to perform complex queries while
[info] maintaining performance that scales with the size of the result
[info] set. You can keep index definitions in your project directory
[info] and publish them with firebase deploy.
[info] 
[debug] [2018-11-02T22:58:58.267Z] >>> HTTP REQUEST GET https://firestore.googleapis.com/v1beta1/projects/vuepractice-f302e/databases/(default)/indexes  
 
[debug] [2018-11-02T22:58:58.649Z] <<< HTTP RESPONSE 400
[debug] [2018-11-02T22:58:58.649Z] <<< HTTP RESPONSE BODY
[info] 
=== Functions Setup
[info] 
[info] A functions directory will be created in your project with a Node.js
[info] package pre-configured. Functions can be deployed with firebase deploy.
[info] 
[debug] [2018-11-02T22:58:58.653Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2018-11-02T22:58:58.654Z] > authorizing via signed-in user
[debug] [2018-11-02T22:58:58.654Z] >>> HTTP REQUEST GET https://firebase.googleapis.com/v1beta1/projects/vuepractice-f302e  
 
[debug] [2018-11-02T22:58:58.812Z] <<< HTTP RESPONSE 200
[debug] [2018-11-02T22:58:58.816Z] >>> HTTP REQUEST PATCH https://servicemanagement.googleapis.com/v1/services/cloudfunctions.googleapis.com/projectSettings/vuepractice-f302e?updateMask=usageSettings  

[debug] [2018-11-02T22:58:58.817Z] >>> HTTP REQUEST PATCH https://servicemanagement.googleapis.com/v1/services/runtimeconfig.googleapis.com/projectSettings/vuepractice-f302e?updateMask=usageSettings  

[debug] [2018-11-02T22:58:59.752Z] <<< HTTP RESPONSE 200
[debug] [2018-11-02T22:58:59.765Z] <<< HTTP RESPONSE 200
[info] +  Wrote functions/package.json
[info] +  Wrote functions/index.js
[info] 
=== Hosting Setup
[info] 
[info] Your public directory is the folder (relative to your project directory) that
[info] will contain Hosting assets to be uploaded with firebase deploy. If you
[info] have a build process for your assets, use your build's output directory.
[info] 
